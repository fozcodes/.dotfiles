set -g default-shell "/opt/homebrew/bin/fish" 
set -g default-command "reattach-to-user-namespace -l /opt/homebrew/bin/fish"

## Recommended from Neovim
set-option -g default-terminal "screen-256color"
set-option -g focus-events on
set-option -sa terminal-overrides ',xterm-256color:RGB'

## Renumber windows when you kill one in the middle by accident
set-option -g renumber-windows on

## Set prefix
unbind C-b
set -g prefix C-s
set -sg escape-time 1

set-option -g status-keys emacs

## Set windows/panes to open in current path
bind c neww -c "#{pane_current_path}"
bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'

bind S new-session -c "~/Code"
bind s choose-tree -sGO name

## Turn on mouse
set -g mouse on

## Reload config
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# This took a _long_ time to figure out, but having these things made it fast again:
# - setting the title of the pane in vim using 
#     vim.opt.title = true
#     vim.opt.titlestring = "nvim"
# - reading that here instead of using the $is_vim stuff
# - running nvim using bash with SHELL='/bin/bash' nvim (set my alias to do this)
# Bind keys to check pane title for Neovim
bind-key -n C-h if-shell '[ "#{pane_title}" = "nvim" ]' 'send-keys C-h' 'select-pane -L'
bind-key -n C-j if-shell '[ "#{pane_title}" = "nvim" ]' 'send-keys C-j' 'select-pane -D'
bind-key -n C-k if-shell '[ "#{pane_title}" = "nvim" ]' 'send-keys C-k' 'select-pane -U'
bind-key -n C-l if-shell '[ "#{pane_title}" = "nvim" ]' 'send-keys C-l' 'select-pane -R'


bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-b' select-pane -l

## Pane resize
bind j resize-pane -D 10
bind k resize-pane -U 10
bind l resize-pane -L 10
bind h resize-pane -R 10

## Status bar config

# Theme color variables
set -g @nocolour "terminal"
set -g @purple "#9f99d1"
set -g @blue "#86bada"
set -g @pink "#dbaad7"
set -g @peach "#f6beb0"
set -g @yellow "#ffe3b3"

# Foreground colors for contrast
set -g @dark_gray "#2d2d2d"
set -g @light_gray "#f5f5f5"
set -g @white "#ffffff"
set -g @black "#000000"

# set-option -g status-style bg=blue
# set-option -g status-style fg=default
# set-option -g status-left "(#[fg=blue]#S#[default])"
set-option -g status-left-length 100
set-option -g status-justify left
# set -g status-right " #(battery -t) #(date '+%a, %b %d - %I:%M') "


set-option -g status "on"

# Default statusbar color
set-option -g status-style bg=default,fg=default

# Default window title colors
set-window-option -g window-status-style bg=terminal,fg=terminal 

# terminal window with an activity alert
set-window-option -g window-status-activity-style bg=terminal,fg=terminal 

# Active window title colors
set-window-option -g window-status-current-style bg=terminal,fg=terminal 

# Set active pane border color
set-option -g pane-active-border-style fg="#{@purple}"

# Set inactive pane border color
set-option -g pane-border-style fg=colour239

# Message info
set-option -g message-style bg=colour239,fg=colour223 # bg=bg2, fg=fg1

# Writing commands inactive
set-option -g message-command-style bg=colour239,fg=colour223 # bg=fg3, fg=bg1

# Pane number display
set-option -g display-panes-active-colour colour1 #fg2
set-option -g display-panes-colour colour237 #bg1

# Clock
set-window-option -g clock-mode-colour colour109 #blue

# Bell
set-window-option -g window-status-bell-style bg=colour167,fg=colour235 # bg=red, fg=bg

set-option -g status-left "\
#[fg=#{@dark_gray}, bg=#{@pink}]#{?client_prefix,#[bg=#{@dark_gray}],} ‚ùê #S \
#[fg=#{@pink}, bg=#{@dark_gray}]#{?client_prefix,#[fg=#{@pink}],}ÓÇ∞#{?window_zoomed_flag, üîç,}"

set-option -g status-right "\
#[fg=#{@peach}, bg=#{@nocolour}] ÓÇ≤\
#[fg=#{@dark_gray}, bg=#{@peach}] %Y-%m-%d \
#[fg=#{@dark_gray}, bg=#{@peach}] ÓÇ≥ %H:%M \
#[fg=#{@dark_gray}, bg=#{@peach}] ÓÇ≥  "

set-window-option -g window-status-current-format "\
#[fg=#{@blue}, bg=#{@nocolour},italics]ÓÇ∞\
#[fg=#{@blue}, bg=#{@nocolour}] #I* ÓÇ±\
#[fg=#{@blue}, bg=#{@nocolour}, bold] #W #{=|-24|‚Ä¶;s|$HOME|~|:pane_current_path} \
#[fg=#{@dark_gray}, bg=#{@blue}]ÓÇ∞"

set-window-option -g window-status-format "\
#[fg=#{@dark_gray},bg=#{@purple}]ÓÇ∞\
#[fg=#{@light_gray},bg=#{@purple}] #I ÓÇ±\
#[fg=#{@light_gray}, bg=#{@purple}] #W #{=|-24|‚Ä¶;s|$HOME|~|:pane_current_path} \
#[fg=#{@purple}, bg=#{@nocolour}]ÓÇ∞"


##clipboard fix
bind-key -T copy-mode 'y' send -X copy-pipe-and-cancel "pbcopy"

## Scrollback
set-option -g history-limit 20000

## Use vi keys in window
set-window-option -g mode-keys vi
unbind-key -T copy-mode-vi v
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection
bind-key -T copy-mode-vi 'Y' send -X copy-end-of-line
bind-key -T copy-mode-vi 'V' send -X select-line

set-environment -g PATH "/opt/homebrew/bin:/usr/local/bin:/bin:/usr/bin"

bind C-o popup -E -d "#{pane_current_path}" -w 90% -h 90% "opencode"


set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'laktak/extrakto'


set -g @extrakto_fzf_tool "fzf"
set -g @extrakto_split_size "15"
set -g @extrakto_clip_tool "xsel --input --clipboard" # works better for nvim
set -g @extrakto_copy_key "tab"      # use tab to copy to clipboard
set -g @extrakto_insert_key "enter"  # use enter to insert selection
set -g @extrakto_fzf_header "i c f g" # for small screens shorten the fzf header

run '/opt/homebrew/opt/tpm/share/tpm/tpm'

set -g @resurrect-strategy-nvim 'session'

set -g @resurrect-save 'C-s'
set -g @resurrect-restore 'C-r'

set -g @continuum-restore 'on'
